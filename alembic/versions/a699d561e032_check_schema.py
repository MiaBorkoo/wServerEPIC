"""check_schema

Revision ID: a699d561e032
Revises: file_tables
Create Date: 2025-06-01 16:02:44.961355

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a699d561e032'
down_revision = 'file_tables'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('shared_files',
    sa.Column('share_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('file_id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.String(length=50), nullable=False),
    sa.Column('recipient_id', sa.String(length=50), nullable=False),
    sa.Column('encrypted_file_key', sa.String(length=256), nullable=False),
    sa.Column('shared_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['file_id'], ['files.file_uuid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.username'], ),
    sa.ForeignKeyConstraint(['recipient_id'], ['users.username'], ),
    sa.PrimaryKeyConstraint('share_id')
    )
    op.create_index('idx_shared_files_expires', 'shared_files', ['expires_at'], unique=False)
    op.create_index('idx_shared_files_owner', 'shared_files', ['owner_id'], unique=False)
    op.create_index('idx_shared_files_recipient', 'shared_files', ['recipient_id'], unique=False)
    op.drop_index(op.f('idx_file_timestamp'), table_name='file_audit_log')
    op.drop_table('file_audit_log')
    op.drop_table('shares')
    op.drop_index(op.f('idx_device_certs_username'), table_name='device_certificates')
    op.drop_constraint(op.f('uq_device_certificates_user_device'), 'device_certificates', type_='unique')
    op.add_column('files', sa.Column('file_uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False))
    op.add_column('files', sa.Column('name', sa.String(length=255), nullable=False))
    op.add_column('files', sa.Column('size', sa.Float(), nullable=False))
    op.add_column('files', sa.Column('encrypted_file', sa.Text(), nullable=False))
    op.add_column('files', sa.Column('integrity_hash', sa.String(length=128), nullable=False))
    op.add_column('files', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('files', 'owner_id',
               existing_type=sa.UUID(),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.create_index('idx_files_owner', 'files', ['owner_id'], unique=False)
    op.drop_constraint(op.f('files_owner_id_fkey'), 'files', type_='foreignkey')
    op.create_foreign_key(None, 'files', 'users', ['owner_id'], ['username'])
    op.drop_column('files', 'deleted_at')
    op.drop_column('files', 'is_deleted')
    op.drop_column('files', 'file_id')
    op.drop_column('files', 'upload_timestamp')
    op.drop_column('files', 'file_size_encrypted')
    op.drop_column('files', 'filename_encrypted')
    op.drop_column('files', 'server_storage_path')
    op.drop_column('files', 'file_data_hmac')
    op.drop_index(op.f('idx_trust_cert_id'), table_name='trust_relationships')
    op.drop_index(op.f('idx_trust_username'), table_name='trust_relationships')
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('users', 'encrypted_mek',
               existing_type=postgresql.BYTEA(),
               type_=sa.String(length=256),
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.drop_column('users', 'public_key')
    op.drop_column('users', 'totp_secret')
    op.drop_column('users', 'user_data_hmac')
    op.drop_column('users', 'last_login')
    op.drop_column('users', 'user_id')
    op.drop_index(op.f('idx_verification_created_at'), table_name='verification_events')
    op.drop_index(op.f('idx_verification_trust_id'), table_name='verification_events')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_verification_trust_id'), 'verification_events', ['trust_id'], unique=False)
    op.create_index(op.f('idx_verification_created_at'), 'verification_events', ['created_at'], unique=False)
    op.add_column('users', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('user_data_hmac', sa.VARCHAR(length=64), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('totp_secret', sa.VARCHAR(length=64), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('public_key', sa.TEXT(), autoincrement=False, nullable=False))
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('users', 'encrypted_mek',
               existing_type=sa.String(length=256),
               type_=postgresql.BYTEA(),
               existing_nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.create_index(op.f('idx_trust_username'), 'trust_relationships', ['username'], unique=False)
    op.create_index(op.f('idx_trust_cert_id'), 'trust_relationships', ['trusted_cert_id'], unique=False)
    op.add_column('files', sa.Column('file_data_hmac', sa.VARCHAR(length=64), autoincrement=False, nullable=False))
    op.add_column('files', sa.Column('server_storage_path', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('files', sa.Column('filename_encrypted', postgresql.BYTEA(), autoincrement=False, nullable=False))
    op.add_column('files', sa.Column('file_size_encrypted', postgresql.BYTEA(), autoincrement=False, nullable=False))
    op.add_column('files', sa.Column('upload_timestamp', sa.BIGINT(), autoincrement=False, nullable=False))
    op.add_column('files', sa.Column('file_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('files', sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('files', sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'files', type_='foreignkey')
    op.create_foreign_key(op.f('files_owner_id_fkey'), 'files', 'users', ['owner_id'], ['user_id'])
    op.drop_index('idx_files_owner', table_name='files')
    op.alter_column('files', 'owner_id',
               existing_type=sa.String(length=50),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_column('files', 'created_at')
    op.drop_column('files', 'integrity_hash')
    op.drop_column('files', 'encrypted_file')
    op.drop_column('files', 'size')
    op.drop_column('files', 'name')
    op.drop_column('files', 'file_uuid')
    op.create_unique_constraint(op.f('uq_device_certificates_user_device'), 'device_certificates', ['username', 'device_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_device_certs_username'), 'device_certificates', ['username'], unique=False)
    op.create_table('shares',
    sa.Column('share_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('file_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('recipient_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('encrypted_data_key', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('granted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('revoked_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('share_grant_hmac', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('share_chain_hmac', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['file_id'], ['files.file_id'], name=op.f('shares_file_id_fkey')),
    sa.ForeignKeyConstraint(['owner_id'], ['users.user_id'], name=op.f('shares_owner_id_fkey')),
    sa.ForeignKeyConstraint(['recipient_id'], ['users.user_id'], name=op.f('shares_recipient_id_fkey')),
    sa.PrimaryKeyConstraint('share_id', name=op.f('shares_pkey')),
    sa.UniqueConstraint('file_id', 'recipient_id', name=op.f('unique_file_recipient'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('file_audit_log',
    sa.Column('log_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('file_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('timestamp', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('client_ip_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('log_entry_hmac', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('previous_log_hmac', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['file_id'], ['files.file_id'], name=op.f('file_audit_log_file_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('file_audit_log_user_id_fkey')),
    sa.PrimaryKeyConstraint('log_id', name=op.f('file_audit_log_pkey'))
    )
    op.create_index(op.f('idx_file_timestamp'), 'file_audit_log', ['file_id', 'timestamp'], unique=False)
    op.drop_index('idx_shared_files_recipient', table_name='shared_files')
    op.drop_index('idx_shared_files_owner', table_name='shared_files')
    op.drop_index('idx_shared_files_expires', table_name='shared_files')
    op.drop_table('shared_files')
    # ### end Alembic commands ### 